from django.db import models
from django.contrib.auth import get_user_model
import uuid

User = get_user_model()  # Dynamically gets the active User model in your project

class Payment(models.Model):
    # Types of fees available
    FEE_TYPE_CHOICES = [
        ('tuition', 'Tuition'),
        ('bus fee', 'Bus Fee'),
        ('feeding fee', 'Feeding Fee'),
    ]

    # Payment status options (NOT user-editable in forms)
    STATUS_PENDING = 'pending'
    STATUS_SUCCESS = 'success'
    STATUS_FAILED = 'failed'

    STATUS_CHOICES = [
        (STATUS_PENDING, 'Pending'),
        (STATUS_SUCCESS, 'Success'),
        (STATUS_FAILED, 'Failed'),
    ]

    # The parent/user who made the payment
    payer = models.ForeignKey(
        User,
        on_delete=models.PROTECT,     
        related_name='payments'       
    )

    # The student the payment is for
    student = models.ForeignKey(
        'Student.Student',              
        on_delete=models.PROTECT,      
        related_name='payments'
    )

    # Type of fee (dropdown from predefined choices)
    fee_type = models.CharField(
        max_length=32,
        choices=FEE_TYPE_CHOICES
    )

    # Payment amount (in Ghana Cedis)
    amount = models.DecimalField(
    max_digits=10,
    decimal_places=2,
    help_text="Amount in GHS (e.g., 10.00 for GHS 10)"  
)

    # Unique payment reference from Paystack or generated by system
    reference = models.CharField(
        max_length=128,
        unique=True,
        editable=False
    )

    # Payment status (automatically updated by system)
    status = models.CharField(
        max_length=16,
        choices=STATUS_CHOICES,
        default=STATUS_PENDING,
        editable=False   # Prevent users from editing directly in forms
    )

    # Whether payment has been verified by the payment gateway
    verified = models.BooleanField(default=False)

    # Stores the raw JSON response from Paystack for record keeping
    metadata = models.JSONField(
        null=True,
        blank=True,
        help_text="Raw response from payment gateway"
    )

    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)  # Set only when created
    updated_at = models.DateTimeField(auto_now=True)      # Updates every save

    def amount_display(self):
        """Returns the amount in GHS as a string with 2 decimal places"""
        return f"{self.amount:.2f}"

    def __str__(self):
        """String representation of the payment in admin/console"""
        student_part = f" - {self.student}" if self.student else ""
        return f"{self.payer.email} - {self.fee_type} - {self.amount_display()}{student_part}"

    def save(self, *args, **kwargs):
        if not self.reference:
            self.reference = str(uuid.uuid4())  # Generates a unique ID
        super().save(*args, **kwargs)
    
    class Meta:
        ordering = ['-created_at']  
        verbose_name = "Payment"
        verbose_name_plural = "Payments"